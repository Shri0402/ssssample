{"version":3,"file":"static/js/161.e9113327.chunk.js","mappings":"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","sources":["components/Card/Card.js","axios/Instance.js","components/Main/Main.js"],"sourcesContent":["import React from \"react\";\nimport { FaRegComment } from \"react-icons/fa\";\nimport { RiHeart2Line } from \"react-icons/ri\";\nimport \"./Card.css\";\n\nfunction Card(\n  {\n    cover,\n    title,\n    dp,\n    user,\n    commentCount,\n    reactionCount,\n    readTime,\n    publishedDate,\n    tags,\n    fromNow,\n  },\n  ref\n) {\n  return (\n    <div className=\"card\">\n      {/* conditionally rendering cover image */}\n      {cover ? <img src={cover} className=\"cover\" alt=\"\" /> : \"\"}\n      <div className=\"author\">\n        <img src={dp} className=\"profile\" alt=\"\" />\n        <div>\n          <p className=\"user-name hover-grey\">{user}</p>\n          <small className=\"date\">{`${publishedDate} (${fromNow})`}</small>\n        </div>\n      </div>\n      <h2 className=\"title\">${title}</h2>\n      <div className=\"tags\">\n        {tags\n          ? tags.map((tag, index) => (\n              <p key={index} className=\"hover-grey\">\n                #{tag}\n              </p>\n            ))\n          : \"\"}\n      </div>\n      <div className=\"bottom\">\n        <div className=\"interactions\">\n          <div className=\"comments hover-grey\">\n            <i>\n              <RiHeart2Line />\n            </i>\n            <p>{reactionCount} Reactions</p>\n          </div>\n          <div className=\"comments hover-grey\">\n            <i>\n              <FaRegComment />\n            </i>\n            <p>{commentCount} Comments</p>\n          </div>\n        </div>\n\n        <div className=\"save\">\n          <small>{readTime} min read</small>\n          <button className=\"grey-btn\">Save</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import axios from \"axios\";\n\nconst instance = axios.create({\n  baseURL: \"https://dev.to/api/articles\",\n});\n\nexport { instance };\n","import React, { useState, useEffect, useRef } from \"react\";\nimport \"./Main.css\";\nimport Card from \"../Card/Card\";\nimport { NavLink } from \"react-router-dom\";\nimport { instance } from \"../../axios/Instance\";\nimport { timeAgo, getLink } from \"../../util/utility\";\nimport Skeleton from \"../Skeleton/Skeleton\";\n\nfunction Main({ page }) {\n  const [articles, setArticles] = useState([]);\n  const [isEmpty, setIsEmpty] = useState(true);\n\n  //ref for page number\n  let pageRef = useRef(1);\n\n  useEffect(() => {\n    //1200ms delay to demonstrate Skeleton UI\n    setTimeout(() => fetchArticles(page, pageRef.current), 1200);\n    return () => {\n      setArticles([]);\n      //enabling skeleton UI\n      setIsEmpty(true);\n      pageRef.current = 1;\n    };\n  }, [page]);\n\n  useEffect(() => {\n    //event listener to be triggered when scroll reaches bottom of the page\n    window.addEventListener(\"scroll\", scrollHandler);\n    return () => window.removeEventListener(\"scroll\", scrollHandler);\n  });\n\n  const fetchArticles = (query, pageNo) => {\n    let link = getLink(query, pageNo);\n    instance\n      .get(link)\n      .then((response) => {\n        if (pageNo === 1) {\n          //replacing all the articles\n          setArticles(response.data);\n        } else {\n          //adding new articles to the existing list\n          setArticles((prevArticles) => [...prevArticles, ...response.data]);\n        }\n        //disabling Skeleton UI\n        setIsEmpty(false);\n      })\n      .catch((err) => {\n        setTimeout(() => {\n          console.log(err);\n          alert(\"Something went wrong!! Try again later.\");\n        }, 3000);\n      });\n  };\n\n  const scrollHandler = () => {\n    if (\n      //checking whether the scroll bar has reached bottom of the page\n      window.innerHeight + document.documentElement.scrollTop >=\n      document.documentElement.offsetHeight\n    ) {\n      pageRef.current += 2;\n      //fetching next page\n      fetchArticles(page, pageRef.current);\n    }\n  };\n\n  return (\n    <div className=\"main\">\n      <ul className=\"topics\">\n        <li>\n          <NavLink\n            to={\"/\"}\n            className={({ isActive }) =>\n              isActive ? \"active-link link\" : \" link\"\n            }\n          >\n            Relevant\n          </NavLink>\n        </li>\n        <li>\n          <NavLink\n            to={\"/latest\"}\n            className={({ isActive }) =>\n              isActive ? \"active-link link\" : \"link\"\n            }\n          >\n            Latest\n          </NavLink>\n        </li>\n        <li>\n          <NavLink\n            to={\"/top\"}\n            className={({ isActive }) =>\n              isActive ? \"active-link link\" : \"link\"\n            }\n          >\n            Top\n          </NavLink>\n        </li>\n      </ul>\n\n      {isEmpty &&\n        //displaying skeleton UI\n        [1, 2, 3, 4, 5].map((value) => (\n          <Skeleton cover={value == 1 ? true : false} key={value} />\n        ))}\n      {articles &&\n        articles.map((article, index) => {\n          return (\n            <Card\n              key={article.id}\n              cover={index === 0 ? article.cover_image : \"\"}\n              title={article.title}\n              commentCount={article.comments_count}\n              reactionCount={article.public_reactions_count}\n              readTime={article.reading_time_minutes}\n              publishedDate={article.readable_publish_date}\n              tags={article.tag_list}\n              user={article.user.name}\n              dp={article.user.profile_image}\n              fromNow={timeAgo(article.published_at)}\n            />\n          );\n        })}\n    </div>\n  );\n}\n\nexport default Main;\n"],"names":["ref","cover","title","dp","user","commentCount","reactionCount","readTime","publishedDate","tags","fromNow","className","src","alt","map","tag","index","instance","axios","baseURL","page","useState","articles","setArticles","isEmpty","setIsEmpty","pageRef","useRef","useEffect","setTimeout","fetchArticles","current","window","addEventListener","scrollHandler","removeEventListener","query","pageNo","link","getLink","then","response","data","prevArticles","catch","err","console","log","alert","innerHeight","document","documentElement","scrollTop","offsetHeight","to","isActive","value","Skeleton","article","cover_image","comments_count","public_reactions_count","reading_time_minutes","readable_publish_date","tag_list","name","profile_image","timeAgo","published_at","id"],"sourceRoot":""}